Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaAPIGatewayExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:::*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - apigateway:*
                Resource: "*"

  MiLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: vanachallenge
        S3Key: index.zip
      Runtime: python3.8
      Timeout: 15

  MiLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MiLambdaFunction.Arn
      Principal: apigateway.amazonaws.com

  MiApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MiAPI
      Description: API Gateway para invocar Lambda
      FailOnWarnings: "true"

  MiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MiApiGateway.RootResourceId
      PathPart: mi-funcion
      RestApiId: !Ref MiApiGateway

  MiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref MiResource
      RestApiId: !Ref MiApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MiLambdaFunction.Arn}/invocations

  MiGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref MiResource
      RestApiId: !Ref MiApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MiLambdaFunction.Arn}/invocations

  MiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MiMethod
    Properties:
      RestApiId: !Ref MiApiGateway
      StageName: prod

Outputs:
  ApiURL:
    Description: "URL de API Gateway"
    Value: !Sub "https://${MiApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/mi-funcion"
